/*     */ package com.lincoln;
/*     */ import java.io.*;
/*     */
/*     */
/*     */
import java.math.BigDecimal;
/*     */ import java.util.ArrayList;
/*     */ import java.util.HashMap;
/*     */ import java.util.List;
/*     */ import java.util.Map;
/*     */ import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
/*     */ import org.jsoup.nodes.Element;
/*     */ import org.jsoup.select.Elements;


/*     */
/*     */ public class CmdBuild {
/*     */   public static Map<String, List<Cmd>> temps;
/*     */   
/*     */   public static List<Cmd> build(String content) {
/*  18 */     List<Cmd> res = new ArrayList<Cmd>();
/*  19 */     int start = -1;
/*  20 */     int end = -1;
/*  21 */     for (int i = 0; i < content.length(); i++) {
/*  22 */       if ((content.charAt(i) <= 'Z' && content.charAt(i) >= 'A') || (content.charAt(i) <= 'z' && content.charAt(i) >= 'a')) {
/*  23 */         if (start != -1) {
/*  24 */           String cmdContent = content.substring(start, end + 1);
/*  25 */           Cmd cmd = new Cmd(cmdContent);
/*  26 */           res.add(cmd);
/*     */         } 
/*  28 */         start = i;
/*  29 */         end = i;
/*     */       } else {
/*  31 */         end++;
/*     */       } 
/*     */     } 
/*  34 */     res.add(new Cmd("Z"));
/*  35 */     return res;
/*     */   }
/*     */   public static Map<Integer, List<String>> tempSize;
/*     */   public static List<Cmd> buildSimple(String content) {
/*  39 */     List<Cmd> res = new ArrayList<Cmd>();
/*  40 */     int start = -1;
/*  41 */     for (int i = 0; i < content.length(); i++) {
/*  42 */       if (content.charAt(i) == 'M' && res.size() == 0 && start == -1) {
/*  43 */         start = i;
/*  44 */       } else if (content.charAt(i) == 'M' || content.charAt(i) == 'L' || content.charAt(i) == 'Q' || content.charAt(i) == 'Z') {
/*  45 */         if (res.size() == 0 && start != -1) {
/*  46 */           String cmdContent = content.substring(start, i);
/*  47 */           Cmd cmd = new Cmd(cmdContent);
/*  48 */           res.add(cmd);
/*  49 */           start = -1;
/*     */         } 
/*  51 */         Cmd cmd = new Cmd("1");
/*  52 */         res.add(cmd);
/*     */       } 
/*     */     } 
/*  55 */     return res;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static void loadTemp(String path) {
/*  68 */     temps = new HashMap();
/*  69 */     StringBuilder content = new StringBuilder();
/*     */     try {
/*  71 */       FileReader reader = new FileReader(path);
/*  72 */       BufferedReader br = new BufferedReader(reader);
/*     */       String line;
/*  74 */       while ((line = br.readLine()) != null) {
/*  75 */         content.append(line);
/*  76 */         content.append("\n");
/*     */       } 
/*  78 */     } catch (IOException e) {
/*  79 */       e.printStackTrace();
/*     */     } 
/*  81 */     Document document = Jsoup.parse(content.toString());
/*  82 */     Elements paths = document.select("path");
/*  83 */     for (int i = 0; i < paths.size(); i++) {
/*  84 */       String key = ((Element)paths.get(i)).attr("v");
/*  85 */       String value = ((Element)paths.get(i)).attr("d");
/*  86 */       List<Cmd> p = build(value);
/*  87 */       temps.put(key, p);
/*     */     } 
/*     */     
/*  90 */     tempSize = new HashMap();
/*  91 */     for (String key : temps.keySet()) {
/*  92 */       int size = ((List)temps.get(key)).size();
/*  93 */       if (tempSize.get(Integer.valueOf(size)) != null) {
/*  94 */         ((List)tempSize.get(Integer.valueOf(size))).add(key);
                   continue;
/*     */       } 
/*  96 */       List<String> l = new ArrayList<String>();
/*  97 */       l.add(key);
/*  98 */       tempSize.put(Integer.valueOf(size), l);
/*     */     } 
/*     */   }
/*     */ 
/*     */   
/*     */   public static String find(String pathContent) {
/* 104 */     if (temps == null) {
/* 105 */       loadTemp(System.getProperty("user.dir") + "\\temp.temp");
/*     */     }
/* 107 */     List<Cmd> cmd = buildSimple(pathContent);
/* 108 */     Map<String, List<Cmd>> reses = findBySize(cmd.size());
/* 109 */     for (String key : reses.keySet()) {
/* 110 */       int index = check((List)reses.get(key), cmd);
/* 111 */       if (index > 0) {
/* 112 */         return index + key;
/*     */       }
/*     */     } 
/* 115 */     return "-";
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static Map<String, List<Cmd>> findBySize(int size) {
/* 125 */     List<String> cs = (List)tempSize.get(Integer.valueOf(size));
/* 126 */     if (cs == null) {
/* 127 */       return new HashMap();
/*     */     }
/* 129 */     Map<String, List<Cmd>> res = new HashMap<String, List<Cmd>>();
/* 130 */     for (String cmd : cs) {
/* 131 */       res.put(cmd, temps.get(cmd));
/*     */     }
/* 133 */     return res;
/*     */   }
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */ 
/*     */   
/*     */   public static int check(List<Cmd> cmds1, List<Cmd> cmds2) {
/* 144 */     if (cmds1.size() != cmds2.size()) {
/* 145 */       return 0;
/*     */     }
/*     */     
/* 148 */     BigDecimal offset = ((BigDecimal)((Cmd)cmds1.get(0)).getParams().get(1)).subtract((BigDecimal)((Cmd)cmds2.get(0)).getParams().get(1)).abs();
/*     */     
/* 150 */     BigDecimal pianyi = ((BigDecimal)((Cmd)cmds1.get(0)).getParams().get(0)).subtract((BigDecimal)((Cmd)cmds2.get(0)).getParams().get(0)).abs().subtract(offset);
/* 151 */     for (int i = 1; i < cmds1.size(); i++) {
/* 152 */       Cmd cmd1 = (Cmd)cmds1.get(i);
/* 153 */       Cmd cmd2 = (Cmd)cmds2.get(i);
/* 154 */       if (!cmd1.getCmd().equals(cmd2.getCmd())) {
/* 155 */         return 0;
/*     */       }
/*     */     } 
/* 158 */     return pianyi.divide(new BigDecimal("29.60"), 0, 4).intValue() + 1;
/*     */   }
/*     */   
/*     */   public static String read(String content) {
/* 162 */     Map<Integer, String> ss = new HashMap<Integer, String>();
/* 163 */     Document document = Jsoup.parse(content);
/* 164 */     Elements paths = document.select("path");
/* 165 */     for (int i = 0; i < paths.size(); i++) {
/* 166 */       String value = (paths.get(i)).attr("d");
/* 167 */       String v = find(value);
/* 168 */       if (v.length() == 2) {
/* 169 */         ss.put(Integer.valueOf(Integer.parseInt(v.substring(0, 1))), v.substring(1));
/*     */       }
/*     */     } 
/* 172 */     return ss.get(Integer.valueOf(1)) + ss.get(Integer.valueOf(2)) + ss.get(Integer.valueOf(3)) + ss.get(Integer.valueOf(4));
/*     */   }
/*     */   
/*     */   public static void main(String[] args) {
/* 176 */     String word = read("<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"150\" height=\"50\" viewBox=\"0,0,150,50\"><path fill=\"#333\" d=\"M26.80 41.12L26.75 41.07L25.17 41.21L25.14 41.18Q21.77 41.19 20.82 39.06L20.67 38.92L20.68 38.92Q22.04 38.08 23.49 36.97L23.46 36.95L23.36 36.85Q24.02 39.10 26.87 38.95L26.73 38.81L26.73 38.80Q27.71 38.95 28.74 38.72L28.61 38.59L28.71 38.69Q29.51 38.04 29.43 37.09L29.43 37.09L29.50 37.16Q29.38 36.01 27.59 35.33L27.61 35.35L23.91 33.93L23.88 33.90Q21.53 32.54 21.19 29.00L21.09 28.91L21.13 28.94Q21.06 26.93 23.23 26.35L23.18 26.31L23.22 26.35Q24.07 26.01 27.04 26.01L27.00 25.98L27.06 26.04Q31.98 26.08 32.89 28.60L32.87 28.57L32.77 28.47Q32.26 29.14 31.53 29.60L31.42 29.49L30.07 30.50L30.04 30.47Q29.61 28.63 26.38 28.40L26.24 28.26L26.27 28.29Q25.85 28.48 24.82 28.90L24.81 28.89L24.70 28.78Q24.19 29.19 24.19 30.29L24.10 30.20L24.24 30.33Q24.49 31.32 26.32 32.00L26.36 32.04L26.25 31.93Q27.36 32.35 30.02 33.46L30.06 33.49L30.12 33.56Q31.93 34.37 32.12 36.92L32.04 36.84L31.99 36.80Q32.22 37.59 32.14 38.58L32.06 38.50L32.06 38.50Q32.06 39.41 31.49 40.06L31.54 40.11L31.52 40.09Q29.82 41.09 26.77 41.09ZM31.51 43.66L31.64 43.79L31.54 43.69Q32.58 43.85 33.95 43.55L33.77 43.37L33.88 43.48Q34.96 42.81 34.77 41.59L34.81 41.63L34.80 41.63Q34.60 40.92 34.29 39.32L34.38 39.41L34.27 39.31Q33.87 36.50 32.08 35.28L32.04 35.24L31.95 35.15Q31.47 33.80 30.22 33.08L30.26 33.12L30.21 33.07Q28.93 32.63 26.46 31.68L26.42 31.64L26.46 31.68Q26.67 31.28 26.93 31.17L26.98 31.21L26.84 31.07Q27.51 30.68 28.16 30.64L28.15 30.63L28.24 30.72Q28.90 30.54 29.66 30.81L29.78 30.92L29.74 30.96L29.88 30.99L30.19 31.11L30.03 30.99L30.06 31.02Q31.12 31.47 31.31 32.73L31.35 32.77L31.36 32.77Q32.70 32.02 34.61 30.35L34.63 30.37L34.60 30.34Q34.37 29.66 33.38 28.48L33.24 28.33L33.34 28.43Q32.21 25.75 27.11 25.63L27.04 25.56L27.02 25.54Q23.98 25.62 22.00 26.19L21.84 26.03L21.95 26.14Q20.59 26.77 20.82 28.86L20.74 28.78L20.71 28.75Q20.91 30.10 21.83 32.19L21.83 32.19L21.80 32.16Q22.27 33.20 23.30 33.93L23.27 33.90L23.39 34.02Q23.98 35.40 25.27 36.09L25.33 36.14L25.31 36.13Q26.34 36.47 27.29 36.86L27.25 36.81L29.15 37.57L29.12 37.54Q28.72 38.58 26.77 38.47L26.77 38.46L26.75 38.44Q26.33 38.51 25.11 38.21L25.18 38.28L25.21 38.16L24.99 38.17L25.11 38.29Q24.12 37.80 23.48 36.31L23.50 36.33L23.45 36.29Q21.42 37.94 20.31 39.09L20.19 38.97L20.23 39.00Q20.46 39.84 21.49 40.64L21.47 40.63L21.34 40.80L21.40 40.86Q22.84 42.98 27.06 43.36L27.00 43.30L27.02 43.32Q28.28 43.44 31.52 43.67Z\"></path><path fill=\"#222\" d=\"M84.99 28.54L84.98 28.53L85.17 28.72Q82.26 28.62 81.50 30.87L81.53 30.90L81.52 30.89Q81.22 31.54 81.10 32.19L81.19 32.27L81.21 32.30Q83.68 32.36 85.31 32.36L85.45 32.50L85.45 32.50Q86.98 32.39 89.56 32.27L89.72 32.43L89.65 32.36Q89.55 30.66 88.14 29.59L88.03 29.49L88.15 29.61Q86.87 28.63 85.09 28.63ZM85.20 41.23L85.23 41.26L85.18 41.21Q80.98 41.24 79.68 39.83L79.53 39.67L79.64 39.78Q78.73 38.38 78.58 35.11L78.44 34.97L78.45 34.98Q78.55 34.85 78.47 33.48L78.41 33.42L78.39 33.39Q78.30 31.13 78.30 30.41L78.38 30.49L78.33 30.44Q78.30 28.54 79.02 27.44L79.05 27.47L79.04 27.46Q80.42 26.03 83.39 26.03L83.39 26.02L85.05 26.12L84.94 26.01Q86.98 25.99 88.50 26.30L88.46 26.26L88.62 26.42Q90.65 26.85 91.64 28.07L91.67 28.10L91.48 27.91Q92.29 29.18 92.37 31.27L92.35 31.26L92.23 31.13Q92.20 32.24 92.24 34.41L92.22 34.39L92.36 34.53Q89.38 34.45 86.60 34.45L86.68 34.53L81.10 34.54L81.17 34.61Q81.16 38.86 85.23 38.64L85.39 38.80L85.31 38.71Q89.05 38.50 90.27 36.67L90.30 36.70L90.23 36.63Q91.20 37.26 92.80 38.44L92.68 38.32L92.66 38.30Q91.44 40.85 87.29 41.11L87.18 41.01L87.30 41.13Q86.46 41.04 85.08 41.12ZM87.52 43.59L87.47 43.54L87.56 43.63Q88.63 43.56 89.85 43.64L89.83 43.62L89.71 43.50Q94.69 43.68 95.60 40.90L95.63 40.93L95.65 40.95Q94.01 39.69 92.90 38.92L93.00 39.02L93.02 39.04Q93.03 38.48 93.22 38.25L93.38 38.41L93.26 38.29Q92.60 37.90 91.23 36.95L91.21 36.92L91.19 36.90Q92.22 36.91 94.28 37.21L94.28 37.22L94.24 37.18Q94.26 36.02 94.18 35.33L94.19 35.34L93.96 33.32L94.02 33.38Q93.86 31.01 93.21 29.52L93.20 29.52L93.08 29.40Q92.84 29.08 92.27 28.47L92.28 28.48L92.27 28.47Q92.22 28.26 91.99 27.69L91.92 27.62L91.85 27.56Q90.01 25.56 84.94 25.56L84.93 25.55L83.25 25.54L83.36 25.65Q80.05 25.58 78.60 27.06L78.55 27.01L78.62 27.07Q77.90 28.15 77.94 30.20L78.05 30.31L77.90 30.16Q78.07 31.25 78.18 33.49L78.22 33.53L78.22 33.53Q78.31 35.14 78.42 37.20L78.38 37.16L78.30 37.08Q78.69 39.45 79.57 40.51L79.42 40.37L79.46 40.40Q79.71 40.65 79.90 40.77L79.88 40.75L80.12 41.33L80.18 41.40Q80.87 43.15 87.45 43.53ZM85.29 38.28L85.41 38.40L85.34 38.33Q84.09 38.33 83.17 37.88L83.26 37.97L83.21 37.92Q83.12 37.48 82.93 36.79L83.02 36.89L82.93 36.79Q84.62 36.70 86.22 36.70L86.27 36.75L86.38 36.85Q88.00 36.80 89.67 36.91L89.72 36.96L89.62 36.86Q88.36 38.23 85.35 38.34ZM86.88 30.89L86.97 30.98L86.95 30.95Q87.52 30.92 88.85 31.30L89.02 31.46L89.15 31.79L89.13 31.95L89.07 31.90Q87.68 31.99 86.76 31.95L86.76 31.95L86.79 31.98Q84.53 31.96 84.50 31.96L84.54 32.01L84.59 32.06Q85.28 31.08 86.96 30.96Z\"></path><path fill=\"#333\" d=\"M53.56 40.30L53.71 40.45L53.70 40.44Q49.66 40.70 48.67 38.38L48.53 38.24L48.67 38.38Q49.44 37.43 51.00 35.64L50.99 35.63L50.92 35.57Q51.46 37.63 54.47 37.74L54.39 37.66L54.50 37.77Q57.82 37.78 59.45 36.45L59.49 36.48L59.49 36.48Q60.89 34.87 60.81 32.17L60.75 32.11L60.80 32.16Q60.68 27.13 55.88 27.36L55.83 27.30L55.81 27.29Q52.96 27.41 51.21 28.66L51.32 28.77L50.95 28.55L50.75 28.43L50.64 28.32Q50.96 25.14 50.85 22.40L51.02 22.57L51.00 22.54Q50.77 19.81 50.43 16.50L50.50 16.57L50.55 16.61Q54.10 17.46 57.90 17.35L57.87 17.31L58.03 17.48Q61.83 17.39 65.41 16.14L65.41 16.13L64.68 17.50L64.71 17.52Q64.40 18.28 64.21 19.12L64.32 19.23L64.27 19.19Q61.09 20.15 57.20 20.15L57.20 20.14L57.25 20.20Q55.71 20.10 54.23 19.95L54.38 20.10L54.29 20.02Q54.32 20.80 53.98 25.26L53.91 25.19L53.89 25.18Q54.77 24.76 56.83 24.61L56.84 24.62L56.81 24.59Q60.57 24.84 62.01 26.52L61.92 26.43L61.96 26.46Q63.25 27.91 63.52 31.76L63.65 31.88L63.60 31.84Q63.96 36.12 62.74 38.14L62.69 38.08L62.75 38.15Q60.57 39.88 57.25 40.11L57.43 40.29L57.28 40.13Q56.38 40.31 53.72 40.46ZM59.60 42.57L59.69 42.65L59.67 42.64Q63.21 42.83 65.11 41.72L65.02 41.63L65.11 41.72Q65.95 40.05 65.95 37.95L66.07 38.08L66.03 38.04Q66.03 34.95 65.08 30.84L65.15 30.91L65.05 30.81Q64.73 29.12 63.51 27.71L63.40 27.60L63.50 27.74L63.27 27.43L62.84 27.15L62.94 27.25Q62.58 26.47 61.93 25.79L62.03 25.88L61.96 25.86L62.06 25.96Q60.47 24.21 56.77 24.21L56.67 24.11L56.45 24.15L56.40 24.11Q56.59 23.65 56.78 22.55L56.84 22.60L56.72 22.48Q61.74 22.63 65.78 20.99L65.70 20.92L65.84 21.05Q66.11 19.50 67.06 16.68L67.08 16.70L65.06 17.72L65.14 17.81Q65.52 16.66 66.01 15.52L66.03 15.53L65.91 15.41Q62.09 16.89 57.98 16.97L58.07 17.06L58.05 17.03Q53.94 17.15 49.98 16.04L49.87 15.94L49.87 15.94Q50.69 20.49 50.69 24.90L50.64 24.86L50.61 24.82Q50.63 26.74 50.51 28.65L50.43 28.56L50.43 28.57Q50.65 28.71 51.22 29.01L51.28 29.08L51.27 29.06Q51.72 28.95 52.37 28.60L52.27 28.50L52.23 28.46Q52.32 29.35 52.09 30.88L52.11 30.89L52.10 30.89Q52.39 30.95 52.81 31.17L52.80 31.16L52.83 31.20Q55.57 29.40 57.44 29.40L57.58 29.55L57.50 29.47Q58.86 29.50 60.04 30.14L60.06 30.16L59.95 30.05Q60.38 31.17 60.42 32.12L60.47 32.17L60.50 32.20Q60.52 34.74 59.49 35.84L59.48 35.83L59.52 35.87Q58.11 37.04 55.86 37.27L55.95 37.35L55.77 37.18Q54.87 37.31 54.19 37.23L54.11 37.16L54.14 37.19Q53.43 37.20 52.67 36.86L52.57 36.76L52.52 36.51L52.53 36.76L52.39 36.61Q51.64 36.17 51.10 34.84L51.14 34.87L51.12 34.85Q49.82 36.29 48.14 38.42L48.13 38.41L48.08 38.35Q48.48 39.11 49.32 40.06L49.30 40.04L49.20 39.94Q50.34 41.84 53.16 42.33L53.08 42.25L53.08 42.25Q54.30 42.53 59.67 42.64Z\"></path><path fill=\"#222\" d=\"M117.46 27.73L117.56 27.84L117.42 27.69Q113.98 27.68 112.88 31.03L112.74 30.89L112.88 31.03Q112.48 32.08 112.37 33.15L112.32 33.11L112.36 33.14Q112.14 35.16 113.13 36.50L113.18 36.55L113.20 36.57Q114.56 37.78 117.03 37.81L116.91 37.69L116.94 37.72Q118.85 37.84 120.26 36.70L120.12 36.56L120.08 36.52Q121.54 35.43 121.54 33.65L121.53 33.63L121.60 33.70Q121.50 33.25 121.42 32.87L121.54 32.99L121.49 32.95Q121.29 27.84 117.49 27.76ZM117.41 40.25L117.31 40.15L117.38 40.22Q113.50 40.37 111.71 38.35L111.82 38.46L111.81 38.45Q111.52 39.42 111.06 40.79L111.00 40.73L111.10 40.83Q109.17 41.61 107.92 42.18L107.86 42.12L107.92 42.18Q110.09 36.20 110.09 29.69L110.04 29.64L110.03 29.63Q110.05 21.35 106.62 13.51L106.58 13.47L106.64 13.52Q108.94 14.83 110.27 15.29L110.20 15.22L110.23 15.25Q112.41 21.96 112.56 27.78L112.53 27.75L112.42 27.64Q114.02 25.13 117.75 25.16L117.66 25.08L117.74 25.16Q121.04 25.26 122.52 27.13L122.44 27.05L122.54 27.14Q124.27 29.33 124.42 32.91L124.42 32.90L124.31 32.79Q124.40 33.98 124.32 35.58L124.35 35.62L124.37 35.64Q124.44 37.19 123.57 38.33L123.40 38.16L123.50 38.27Q121.73 39.96 117.39 40.23ZM122.91 42.78L122.92 42.79L122.85 42.72Q124.44 42.82 125.92 42.13L125.75 41.96L125.90 42.11Q127.00 40.82 127.04 38.87L127.00 38.83L126.95 38.79Q126.98 38.31 126.82 37.13L126.91 37.22L126.79 37.10Q126.85 36.55 126.73 35.64L126.56 35.47L126.60 35.50Q125.72 30.66 124.16 28.61L124.31 28.76L124.31 28.76Q124.16 28.57 123.36 27.69L123.38 27.71L123.48 27.82Q123.14 27.44 122.61 26.64L122.59 26.62L122.78 26.81Q121.16 24.85 117.81 24.89L117.81 24.88L117.69 24.76Q115.59 24.76 114.33 25.37L114.44 25.47L114.42 25.46Q114.06 20.91 113.45 17.71L113.54 17.80L113.55 17.81Q112.80 17.63 111.31 17.25L111.29 17.23L111.35 17.29Q111.14 16.46 110.68 15.02L110.73 15.07L110.63 14.97Q108.24 14.21 105.99 12.65L105.87 12.53L105.87 12.53Q109.72 20.79 109.72 29.59L109.80 29.67L109.67 29.54Q109.75 36.58 107.27 42.79L107.26 42.77L107.24 42.75Q107.87 42.36 109.21 41.79L109.20 41.78L109.33 41.91Q109.11 42.69 108.50 44.21L108.45 44.16L108.36 44.06Q110.51 43.32 113.28 42.78L113.19 42.69L113.64 40.93L113.61 40.90Q115.83 42.51 122.76 42.63ZM119.10 30.06L118.99 29.95L119.07 30.03Q120.03 29.96 120.56 30.34L120.54 30.32L120.70 30.48Q120.86 30.83 121.08 32.84L121.20 32.96L121.12 32.88Q121.45 34.88 120.19 36.19L120.09 36.09L120.03 36.04Q118.94 37.51 117.00 37.40L116.91 37.31L116.97 37.37Q115.99 37.46 114.51 36.96L114.57 37.02L114.57 37.03Q114.23 36.42 114.23 35.89L114.40 36.05L114.25 35.91Q114.34 32.91 115.90 31.32L115.85 31.27L115.84 31.29L115.88 31.33Q117.38 30.01 119.13 30.09Z\"></path></svg>");
/* 177 */     System.out.println("end");
/*     */   }









/*     */ }


/* Location:              E:\juying-spider-1.0-SNAPSHOT.jar!\com\lincoln\CmdBuild.class
 * Java compiler version: 8 (52.0)
 * JD-Core Version:       1.0.5
 */